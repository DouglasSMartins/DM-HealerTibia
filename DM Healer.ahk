; Generated by AutoGUI 2.5.4

;#include gdip_all.ahk

#NoEnv
#SingleInstance Force
#InstallKeybdHook
#MaxHotkeysPerInterval 99000000
#HotkeyInterval 99000000
#KeyHistory 0
#WinActivateForce
ListLines Off
Process, Priority, , A
SetBatchLines, -1
SetKeyDelay, -1, -1
SetMouseDelay, -1
SetDefaultMouseSpeed, 0
SetWinDelay, -1
SetControlDelay, -1
SendMode Input

CoordMode, Mouse ; Required: change coord mode to screen vs relative.
CoordMode, Pixel ; Required: change coord mode to screen vs relative.

SetWorkingDir %A_ScriptDir%


Menu menuArquivo, Add, &Open...`tCtrl+O, MenuAbrir
Menu menuArquivo, Disable, 1&

Menu menuArquivo, Add, &Configurações..., MenuConfiguracao
; Menu menuArquivo, Disable, 2&

Menu menuArquivo, Add, Update, MenuUpdate
Menu menuArquivo, Disable, 3&

Menu menuArquivo, Add, &Sair`tEsc, MenuSair
Menu MenuBar, Add, Arquivo, :menuArquivo
Menu menuAjuda, Add, &Comandos, MenuComandos
Menu menuAjuda, Add, &Sobre, MenuSobre
Menu MenuBar, Add, &Ajuda, :menuAjuda
Gui Principal: Menu, MenuBar

global percentLife1, percentLife2, percentLife3
global x1_lifeBar, x2_lifeBar, y1_lifeBar, y2_lifeBar
global x1_manaBar, x2_manaBar, y1_manaBar, y2_manaBar
global x_pos, x_pos_mana, y_med_mana, y_med
global min_x, max_x, y_med, min_x_mana, max_x_mana, y_med_mana
global fishing_x, fishing_y
global water_coords_x := [], water_coords_y := []

global x_pos_1, x_pos_mana_1, x_pos_2, x_pos_mana_2, x_pos_3, x_pos_mana_3

global clm1 := false, clm2 := false, clm3 := false, cpar := false, chaste := false, cfood := false
global key_lm1, key_lm2, key_lm3, key_par, key_haste, key_food
global source1 := "Life", source2 := "Life", source3 := "Life"

global capa := false, capr := false, capammo := false
global x_pos_APA, y_pos_APA, x_pos_APR, y_pos_APR, x_pos_APAmmo, y_pos_APAmmo
global c_APA, c_APR, c_APAmmo
global keyAPA, keyAPR, keyAPAmmo

global status := 0
global tipoSelecao := 1
global training_status := 0
global fishing_status := 0
global personagem_left := 0

global autoPush_x, auto_Push_y, auto_Push_status := 0

global buff_x_1, buff_y_1, buff_x_2, buff_y_2

; Título aba Heal
Gui Principal: Add, Tab3, , Heal|Utilities (1)|Utilities (2)|Training
Gui Principal: Font, s15 Bold, Tahoma
Gui Principal: Add, Text, x190 y35 w147 h25 +0x200, Heal Control
Gui Principal: Font

; Componentes principais da aba Heal
Gui Principal: Add, Text, x50 y73 w33 h23 +Disabled +0x200 vtxtKey1, Key 1:
Gui Principal: Add, Text, x50 y110 w33 h23 +Disabled +0x200 vtxtKey2, Key 2:
Gui Principal: Add, Text, x50 y147 w33 h23 +Disabled +0x200 vtxtKey3, Key 3:
Gui Principal: Add, ComboBox, x94 y73 w55 +Disabled +Uppercase vcbxKey1 gsetKeylm1, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
Gui Principal: Add, ComboBox, x94 y110 w55 +Disabled +Uppercase vcbxKey2 gsetKeylm2, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
Gui Principal: Add, ComboBox, x94 y147 w55 +Disabled +Uppercase vcbxKey3 gsetKeylm3, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
Gui Principal: Add, ComboBox, x205 y73 w136 +Disabled vcbxSource1 gsetSource1, Life||Mana
Gui Principal: Add, Text, x162 y73 w40 h23 +Disabled +0x200 vtxtSource1, Source:
Gui Principal: Add, Text, x162 y110 w40 h23 +Disabled +0x200 vtxtSource2, Source:
Gui Principal: Add, ComboBox, x205 y110 w136 +Disabled vcbxSource2 gsetSource2, Life||Mana
Gui Principal: Add, Text, x162 y147 w40 h23 +Disabled +0x200 vtxtSource3, Source:
Gui Principal: Add, ComboBox, x205 y147 w136 +Disabled vcbxSource3 gsetSource3, Life||Mana
Gui Principal: Add, CheckBox, x28 y73 w15 h23 vCheck1 gCheckBox1
Gui Principal: Add, CheckBox, x28 y110 w15 h23 vCheck2 gCheckBox2
Gui Principal: Add, CheckBox, x28 y147 w15 h23 vCheck3 gCheckBox3
Gui Principal: Add, Slider, x346 y73 w120 h32 +Disabled +Tooltip vsliderLife1 gSlider1Move, 50
Gui Principal: Add, Slider, x346 y110 w120 h32 +Disabled +Tooltip vsliderLife2 gSlider2Move, 50
Gui Principal: Add, Slider, x346 y147 w120 h32 +Disabled +Tooltip vsliderLife3 gSlider3Move, 50
Gui Principal: Add, Edit, x468 y73 w27 h22 +Disabled vedtLife1 gEdit1Modify
Gui Principal: Add, Edit, x468 y110 w27 h22 +Disabled vedtLife2 gEdit2Modify
Gui Principal: Add, Edit, x468 y147 w27 h22 +Disabled vedtLife3 gEdit3Modify
Gui Principal: Add, Button, x28 y184 w80 h23 vset_Life gbtn_SetaLife, Life Bar
Gui Principal: Add, Button, x250 y184 w80 h23 vset_Mana gbtn_SetaMana, Mana Bar

; Tab dos Buffs e Debuffs
Gui, Principal: Tab, 2
Gui Principal: Font, s15 Bold, Tahoma
Gui Principal: Add, Text, x205 y35 w147 h25 +0x200, Utilities (1)
Gui Principal: Font
Gui Principal: Add, CheckBox, x28 y73 w15 h23 vcheckParalyze gCheckParalyze
Gui Principal: Add, Text, x50 y73 w65 h23 +Disabled +0x200 vtxtParalyze, Anti-Paralyze:
Gui Principal: Add, ComboBox, x120 y73 w55 +Disabled +Uppercase vcbxKeyParalyze gsetKeypar, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
Gui Principal: Add, CheckBox, x28 y110 w15 h23 vcheckAutoHaste gCheckAutoHaste
Gui Principal: Add, Text, x50 y110 w65 h23 +Disabled +0x200 vtxtAutoHaste, Auto Haste:
Gui Principal: Add, ComboBox, x120 y110 w55 +Disabled +Uppercase vcbxKeyAutoHaste gsetKeyhaste, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
; Gui Principal: Add, Text, x185 y73 w80 h23 +0x200 vtxtStatusParalyze +Disabled, Não configurado
Gui Principal: Add, Text, x300 y136 w55 h23, Auto Push:
Gui Principal: Add, Button, x370 y134 w55 h20 vbtn_AutoPush gclickAutoPush, Off
Gui Principal: Add, text, x435 y130 w50 h50 vautoPush_Pos_Status +Disabled, X = ?`nY = ?
Gui Principal: Add, Button, x28 y184 w80 h23 vset_Utility gbtn_SetaUtility, Utility Bar
Gui Principal: Add, Text, x300 y80 w70 h23, Auto Fishing:
Gui Principal: Add, Button, x370 y62 w70 h23 gSetaFishingRod, Fishing Rod
Gui Principal: Add, Button, x370 y92 w70 h23 gSetaWater, Water
Gui Principal: Add, Button, x450 y81 w55 h20 vbtn_AutoFishing gclickAutoFishing +Disabled, Start
Gui Principal: Add, CheckBox, x28 y147 w15 h23 vcheckAutoFood gCheckAutoFood
Gui Principal: Add, Text, x50 y152 w65 h23 +Disabled vtxtAutoFood, Auto Food:
Gui Principal: Add, ComboBox, x120 y147 w55 +Disabled +Uppercase vcbxKeyAutoFood gsetKeyfood, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12

; Tab dos Buffs e Debuffs
Gui, Principal: Tab, 3
Gui Principal: Font, s15 Bold, Tahoma
Gui Principal: Add, Text, x205 y35 w147 h25 +0x200, Utilities (2)
Gui Principal: Font
Gui Principal: Add, Text, x50 y73 w33 h23 +Disabled +0x200 vtxtKeyAPR, Ring:
Gui Principal: Add, Text, x50 y110 w35 h23 +Disabled +0x200 vtxtKeyAPA, Amulet:
Gui Principal: Add, Text, x50 y147 w33 h23 +Disabled +0x200 vtxtKeyAPAmmo, Ammo:
Gui Principal: Add, ComboBox, x94 y73 w55 +Disabled +Uppercase vcbxKeyAPR gsetKeyAPR, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
Gui Principal: Add, ComboBox, x94 y110 w55 +Disabled +Uppercase vcbxKeyAPA gsetKeyAPA, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
Gui Principal: Add, ComboBox, x94 y147 w55 +Disabled +Uppercase vcbxKeyAPAmmo gsetKeyAPAmmo, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
Gui Principal: Add, CheckBox, x28 y73 w15 h23 vautoPushRing gCheckBoxAPR
Gui Principal: Add, CheckBox, x28 y110 w15 h23 vautoPushAmulet gCheckBoxAPA
Gui Principal: Add, CheckBox, x28 y147 w15 h23 vautoPushAmmo gCheckBoxAPAmmo
Gui Principal: Add, Button, x155 y73 w55 +Disabled vbtn_APR gsetPosAPR, Setar
Gui Principal: Add, Button, x155 y110 w55 +Disabled vbtn_APA gsetPosAPA, Setar
Gui Principal: Add, Button, x155 y147 w55 +Disabled vbtn_APAmmo gsetPosAPAmmo, Setar

Gui, Principal: Tab, 4
Gui Principal: Font, s15 Bold, Tahoma
Gui Principal: Add, Text, x205 y35 w147 h25 +0x200, Training
Gui Principal: Font
Gui Principal: Add, CheckBox, x28 y73 w15 h23 vCheckTraining1 gCheckBoxTraining1
Gui Principal: Add, CheckBox, x28 y110 w15 h23 vCheckTraining2 gCheckBoxTraining2
Gui Principal: Add, CheckBox, x28 y147 w15 h23 vCheckTraining3 gCheckBoxTraining3
Gui Principal: Add, Text, x50 y73 w33 h23 +Disabled +0x200 vtxtKeyTraining1, Key 1:
Gui Principal: Add, Text, x50 y110 w33 h23 +Disabled +0x200 vtxtKeyTraining2, Key 2:
Gui Principal: Add, Text, x50 y147 w33 h23 +Disabled +0x200 vtxtKeyTraining3, Key 3:
Gui Principal: Add, ComboBox, x94 y73 w55 +Disabled +Uppercase vcbxKeyTraining1, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
Gui Principal: Add, ComboBox, x94 y110 w55 +Disabled +Uppercase vcbxKeyTraining2, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
Gui Principal: Add, ComboBox, x94 y147 w55 +Disabled +Uppercase vcbxKeyTraining3, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
Gui Principal: Add, CheckBox, x28 y184 w15 h23 vCheckTraining4 gCheckBoxTraining4
Gui Principal: Add, Text, x50 y184 w70 h23 +Disabled +0x200 vtxtKeyTraining4, Mana potion:
Gui Principal: Add, ComboBox, x120 y184 w55 +Disabled +Uppercase vcbxKeyTraining4, 1|2|3|4|5|6|7|8|9|0|F1|F2|F3|F4|F5|F6|F7|F8|F9|F10|F11|F12
Gui Principal: Add, Slider, x185 y184 w120 h32 +Tooltip vsliderLifeTraining4 gSliderTraining4Move, 50
Gui Principal: Add, Edit, x315 y184 w27 h22 vedtLifeTraining4 gEditTraining4Modify
Gui Principal: Add, Button, x250 y105 w120 h22 vbtn_StartTraining gStartTrainingButton, Start Training
Gui Principal: Add, Button, x360 y184 w80 h23 vset_ManaTraining gbtn_SetaManaTraining, Mana Bar
Gui Principal: Add, Text, x250 y130 w60 h23 vtxtTimer_Training, Timer (ms):
Gui Principal: Add, Edit, x305 y130 w50 h15 veditTimer_Training
Gui, Principal: Tab
; Botões
Gui Principal: Add, Text, x14 y227 w55 h23 +0x200, Timer (ms):
Gui Principal: Add, Edit, x69 y227 w70 h21 vtimer, 300
Gui Principal: Add, Button, x320 y227 w80 h23 +Disabled vstartPause gbtn_Start, &Start
Gui Principal: Add, Button, x408 y227 w80 h23 +Disabled, &Save
Gui Principal: Add, Button, x145 y227 w70 h21 vbtn_Timer gsetTimer, Set Timer

; StatusBar
Gui Principal: Add, StatusBar, vstatusBar, Falta definir a posição inicial e final da vida/mana.

; Tela de Configuração

; Título
Gui Configuracao: Font, s16 Bold, Tahoma
Gui Configuracao: Add, Text, x28 y12 w154 h31 +0x200, Configurações
Gui Configuracao: Font

; Componentes principais da configuração
Gui Configuracao: Add, Text, x18 y67 w65 h23 +0x200, Setar a vida:
Gui Configuracao: Add, Radio, x100 y54 w120 h23 vpointClick gPointClickFunc, Point-and-Click
Gui Configuracao: Add, Radio, x100 y84 w133 h23 vrectangle gRectangleFunc, Seleção com retângulo
GuiControl, Configuracao:, rectangle, 1
Gui Configuracao: Add, Text, x55 y128 w28 h23 +0x200, Som:
Gui Configuracao: Add, Slider, x95 y130 w203 h32, 50

; Botões
Gui Configuracao: Add, Button, x229 y189 w80 h23 gBotaoVoltarConfFunc, &Voltar

Gui Principal: +LabelGUIPrincipal
Gui Configuracao: +LabelGUIConfiguracao

Gui Principal: Show, w526 h275, DM Healer
Return

clickAutoFishing:
    if(fishing_status = 0){
        SetTimer, runFishing, 500
        fishing_status := 1
        GuiControl, Principal:, btn_AutoFishing, Pause
    } else {
        SetTimer, runFishing, Off
        fishing_status := 0
        GuiControl, Principal:, btn_AutoFishing, Start
    }
Return

global colorTeste, x_teste, y_tete

runFishing:
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		Return
	}
    Loop % water_coords_x.MaxIndex()
    {
        ;MsgBox, % water_coords_x[A_Index]
        Sleep, 1000
        MouseMove, %fishing_x%, %fishing_y%, 0
        Send, {RButton}
        MouseMove, water_coords_x[A_Index], water_coords_y[A_Index], 0
        Send, {LButton}
    }
    Send, {Ctrl Down}
    if(personagem_left = 1){
        Send, {Right}
        personagem_left := 0
    } else {
        Send, {Left}
        personagem_left := 1
    }
    Send, {Ctrl Up}
Return

^+w::
    gosub clickAutoFishing
Return

SetaFishingRod:
    SetTitleMatchMode,2
    DetectHiddenWindows, On
    IfWinExist, % "Tibia"
    {
        WinActivate
        KeyWait, LButton, D
        MouseGetPos, fishing_x, fishing_y
        if(water_coords_x.Length() >= 1){
            GuiControl, Principal: Enabled, btn_AutoFishing
        }
        TrayTip, , Posição da vara de pesca setado com sucesso!
    } else {
        MsgBox, O Tibia não se encontra aberto
    }
Return

^e::
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		MsgBox, Faça isso somente na tela do Tibia.
        Return
	}
    MouseGetPos, water_x, water_y
    water_coords_x.Push(water_x)
    water_coords_y.Push(water_y)
    if(varExist(fishing_x)){
        GuiControl, Principal: Enabled, btn_AutoFishing
    }
Return

SetaWater:
    SetTitleMatchMode,2
    DetectHiddenWindows, On
    IfWinExist, % "Tibia"
    {
        water_coords_x := []
        water_coords_y := []
        WinActivate
    } else {
        MsgBox, O Tibia não se encontra aberto
    }
Return

varExist(ByRef v) { ; Requires 1.0.46+
   return &v = &n ? 0 : v = "" ? 2 : 1 
}

PointClickFunc:
    tipoSelecao := 0
    GuiControl, Principal:Disable, set_Life
    GuiControl, Principal:Disable, set_Mana
    GuiControl, Principal:Disable, set_Utility
Return

RectangleFunc:
    tipoSelecao := 1
    GuiControl, Principal:Enabled, set_Life
    GuiControl, Principal:Enabled, set_Mana
    GuiControl, Principal:Enabled, set_Utility
Return

BotaoVoltarConfFunc:
    Gui Configuracao: cancel
Return

; Função externa que permite ao usuario selecionar uma área na tela
LetUserSelectRect(ByRef X1, ByRef Y1, ByRef X2, ByRef Y2) {
    static r := 1
    ; Create the "selection rectangle" GUIs (one for each edge).
    
    Gui, leftBorder: -Caption +ToolWindow +AlwaysOnTop
    Gui, leftBorder: Color, Red
    Gui, rightBorder: -Caption +ToolWindow +AlwaysOnTop
    Gui, rightBorder: Color, Red
    Gui, bottomBorder: -Caption +ToolWindow +AlwaysOnTop
    Gui, bottomBorder: Color, Red
    Gui, topBorder: -Caption +ToolWindow +AlwaysOnTop
    Gui, topBorder: Color, Red
    
    ; Disable LButton.
    Hotkey, *LButton, lusr_return, On
    ; Wait for user to press LButton.
    KeyWait, LButton, D
    ; Get initial coordinates.
    MouseGetPos, xorigin, yorigin
    ; Set timer for updating the selection rectangle.
    SetTimer, lusr_update, 10
    ; Wait for user to release LButton.
    KeyWait, LButton
    ; Re-enable LButton.
    Hotkey, *LButton, Off
    ; Disable timer.
    SetTimer, lusr_update, Off
    ; Destroy "selection rectangle" GUIs.

    Gui, leftBorder: Destroy
    Gui, rightBorder: Destroy
    Gui, bottomBorder: Destroy
    Gui, topBorder: Destroy
    
    Return

 
    lusr_update:
        MouseGetPos, x, y
        if (x = xlast && y = ylast)
            ; Mouse hasn't moved so there's nothing to do.
            Return
        if (x < xorigin)
             x1 := x, x2 := xorigin
        else x2 := x, x1 := xorigin
        if (y < yorigin)
             y1 := y, y2 := yorigin
        else y2 := y, y1 := yorigin
        ; Update the "selection rectangle".
        Gui, leftBorder:Show, % "NA X" x1 " Y" y1 " W" x2-x1 " H" r
        Gui, rightBorder:Show, % "NA X" x1 " Y" y2-r " W" x2-x1 " H" r
        Gui, bottomBorder:Show, % "NA X" x1 " Y" y1 " W" r " H" y2-y1
        Gui, topBorder:Show, % "NA X" x2-r " Y" y1 " W" r " H" y2-y1
    lusr_return:
    Return
}

btn_SetaLife:
    SetTitleMatchMode,2
    DetectHiddenWindows, On
    IfWinExist, % "Tibia"
    {
        WinActivate
        goto ^1
    } else {
        MsgBox, O Tibia não se encontra aberto
    }
    
Return

btn_SetaMana:
    SetTitleMatchMode,2
    DetectHiddenWindows, On
    IfWinExist, % "Tibia"
    {
        WinActivate
        goto ^3
    } else {
        MsgBox, O Tibia não se encontra aberto
    }
Return

btn_SetaUtility:
    SetTitleMatchMode,2
    DetectHiddenWindows, On
    IfWinExist, % "Tibia"
    {
        WinActivate
        goto ^+1
    } else {
        MsgBox, O Tibia não se encontra aberto
    }
Return

verifyVersion:
    SetTimer, verifyVersionOnRun, 100000
    UrlDownloadToFile, https://raw.githubusercontent.com/DouglasSMartins/DM-HealerTibia/master/version.txt, version_temp.txt
    FileRead, v_tmp, version_temp.txt
    FileRead, vers, version.txt
    if(v_tmp != vers){
        MsgBox, 0x4, Atualização, Tem uma nova versão disponível. Gostaria de atualizar?, 
        IfMsgBox Yes
            goto UpdateProgram
        else
            FileDelete, version_temp.txt
    } else {
        FileDelete, version_temp.txt
    }
Return

verifyVersionOnRun:
    UrlDownloadToFile, https://raw.githubusercontent.com/DouglasSMartins/DM-HealerTibia/master/version.txt, version_temp.txt
    FileRead, v_tmp, version_temp.txt
    FileRead, vers, version.txt
    if(v_tmp != vers){
        TrayTip, , Uma nova versão foi identificada. Atualize o macro e receba uma loli., , 0x1
        SetTimer, verifyVersionOnRun, off
        Menu menuArquivo, Enable, Update
    }
    FileDelete, version_temp.txt    
Return

UpdateProgram:
    FileRead, v_ants, version.txt
    UrlDownloadToFile, https://raw.githubusercontent.com/DouglasSMartins/DM-HealerTibia/master/version.txt, version.txt
    FileRead, v_depois, version.txt
    FileDelete, version_temp.txt
    ExitApp
Return

MenuSair:
    ExitApp
Return

MenuAbrir:
Return

MenuConfiguracao:
    Gui Configuracao: Show, w319 h227, Configurações
Return

MenuUpdate:
    goto UpdateProgram
Return

MenuComandos:
    MsgBox, Ctrl+1 -> Seta a posição inicial da barra de vida`nCtrl+2 -> Seta a posição final da barra de vida (Modo Point-and-Click)`nCtrl+3 -> Seta a posição inicial da barra de mana`nCtrl+4 -> Seta a posição final da barra de mana (Modo Point-and-Click)`nCtrl+Shift+1 -> Seta a posição inicial da barra de status`nCtrl+Shift+2 -> Seta a posição final (Modo Point-and-Click)`nAlt+X -> Pausa/Ativa o BOT`nCtrl+Z -> Seta a posição do Drag&Drop`nCtrl+LButton* -> Ativa a função do Drag&Drop`nAlt+A -> Pausa/Ativa o Drag&Drop`n`n`n*LButton = Botão esquerdo do mouse
Return

MenuSobre:
    MsgBox, Tibia Auto Healer v0.1`n`n`nPrograma criado por Douglas Martins
Return

clickAutoPush:
    if(auto_Push_status = 0){
        GuiControl, Principal:, btn_AutoPush, On
        GuiControl, Principal:Enabled, autoPush_Pos_Status
        TrayTip, , D&D ativado, , 0x1
        auto_Push_status := 1
    }
    else {
        GuiControl, Principal:, btn_AutoPush, Off
        GuiControl, Principal:Disable, autoPush_Pos_Status
        TrayTip, , D&D desativado, , 0x1
        auto_Push_status := 0        
    }
Return

^1::
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		MsgBox, Faça isso somente na tela do Tibia.
        Return
	}
    if(tipoSelecao = 0){
        status |= (1 << 0)
        MouseGetPos, x1_lifeBar, y1_lifeBar
        if(status = 1){
            GuiControl, Principal:, statusBar, Falta definir a posição final da vida.
        } else if(status = 3){
            GuiControl, Principal:, statusBar, O bot se encontra pausado.
            TrayTip, , Life setado com sucesso!, , 0x1
            y_med := (y1_lifeBar + y2_lifeBar) / 2
            min_x := min(x1_lifeBar, x2_lifeBar)
            max_x := max(x1_lifeBar, x2_lifeBar)
            
            GuiControlGet, edtLife1, Principal:
            life1 := % edtLife1
            if(life1 != "")
                x_pos_1 := min_x + ((max_x - min_x) * life1) / 100.0
            ;x_pos_mana_1 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife1%) / 100.0
            GuiControlGet, edtLife2, Principal:
            life2 := % edtLife2
            if(life2 != "")
                x_pos_2 := min_x + ((max_x - min_x) * life2) / 100.0
            ;x_pos_mana_2 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife2%) / 100.0
            GuiControlGet, edtLife3, Principal:
            life3 := % edtLife3
            if(life3 != "")
                x_pos_3 := min_x + ((max_x - min_x) * life3) / 100.0
            ;x_pos_mana_3 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife3%) / 100.0
            
        }        
    } else {
        LetUserSelectRect(x1_lifeBar, y1_lifeBar, x2_lifeBar, y2_lifeBar)
        y_med := (y1_lifeBar + y2_lifeBar) / 2
        min_x := min(x1_lifeBar, x2_lifeBar)
        max_x := max(x1_lifeBar, x2_lifeBar)
        
        GuiControlGet, edtLife1, Principal:
        life1 := % edtLife1
        if(life1 != ""){
            x_pos_1 := min_x + ((max_x - min_x) * life1) / 100.0
        }
        ;x_pos_mana_1 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife1%) / 100.0
        GuiControlGet, edtLife2, Principal:
        life2 := % edtLife2
        if(life2 != "")
            x_pos_2 := min_x + ((max_x - min_x) * life2) / 100.0
        ;x_pos_mana_2 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife2%) / 100.0
        GuiControlGet, edtLife3, Principal:
        life3 := % edtLife3
        if(life3 != "")
            x_pos_3 := min_x + ((max_x - min_x) * life3) / 100.0
        ;x_pos_mana_3 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife3%) / 100.0
        GuiControl, Principal:, statusBar, O bot se encontra pausado.
        TrayTip, , Life setado com sucesso!, , 0x1
    }
Return

^2::
    if(tipoSelecao != 0){
        Return
    }
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		MsgBox, Faça isso somente na tela do Tibia.
        Return
	}
    status |= (1 << 1)
    MouseGetPos, x2_lifeBar, y2_lifeBar
    if(status = 2){
        GuiControl, Principal:, statusBar, Falta definir a posição inicial da vida.
    } else if(status = 3){
        GuiControl, Principal:, statusBar, O bot se encontra pausado.
        TrayTip, , Life setado com sucesso!, , 0x1
        y_med := (y1_lifeBar + y2_lifeBar) / 2
        min_x := min(x1_lifeBar, x2_lifeBar)
        max_x := max(x1_lifeBar, x2_lifeBar)
        
        GuiControlGet, edtLife1, Principal:
        life1 := % edtLife1
        if(life1 != "")
            x_pos_1 := min_x + ((max_x - min_x) * life1) / 100.0
        ;x_pos_mana_1 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife1%) / 100.0
        GuiControlGet, edtLife2, Principal:
        life2 := % edtLife2
        if(life2 != "")
            x_pos_2 := min_x + ((max_x - min_x) * life2) / 100.0
        ;x_pos_mana_2 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife2%) / 100.0
        GuiControlGet, edtLife3, Principal:
        life3 := % edtLife3
        if(life3 != "")
            x_pos_3 := min_x + ((max_x - min_x) * life3) / 100.0
    }    
Return

^3::
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		MsgBox, Faça isso somente na tela do Tibia.
        Return
	}
    if(tipoSelecao = 0){
        status |= (1 << 0)
        MouseGetPos, x1_manaBar, y1_manaBar
        if(status = 1){
            GuiControl, Principal:, statusBar, Falta definir a posição final da mana.
        } else if(status = 3){
            GuiControl, Principal:, statusBar, O bot se encontra pausado.
            TrayTip, , Mana setado com sucesso!, , 0x1
            y_med_mana := (y1_manaBar + y2_manaBar) / 2
            min_x_mana := min(x1_manaBar, x2_manaBar)
            max_x_mana := max(x1_manaBar, x2_manaBar)
            
            GuiControlGet, edtLife1, Principal:
            life1 := % edtLife1
            if(life1 != "")
                x_pos_mana_1 := min_x_mana + ((max_x_mana - min_x_mana) *life1) / 100.0
            ;x_pos_mana_1 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife1%) / 100.0
            GuiControlGet, edtLife2, Principal:
            life2 := % edtLife2
            if(life2 != "")
                x_pos_mana_2 := min_x_mana + ((max_x_mana - min_x_mana) * life2) / 100.0
            ;x_pos_mana_2 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife2%) / 100.0
            GuiControlGet, edtLife3, Principal:
            life3 := % edtLife3
            if(life3 != "")
                x_pos_mana_3 := min_x_mana + ((max_x_mana - min_x_mana) *life3) / 100.0
        }        
    } else {
        LetUserSelectRect(x1_manaBar, y1_manaBar, x2_manaBar, y2_manaBar)
        y_med_mana := (y1_manaBar + y2_manaBar) / 2
        min_x_mana := min(x1_manaBar, x2_manaBar)
        max_x_mana := max(x1_manaBar, x2_manaBar)
        
        GuiControlGet, edtLife1, Principal:
        life1 := % edtLife1
        if(life1 != "")
            x_pos_mana_1 := min_x_mana + ((max_x_mana - min_x_mana) * life1) / 100.0
        ;x_pos_mana_1 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife1%) / 100.0
        GuiControlGet, edtLife2, Principal:
        life2 := % edtLife2
        if(life2 != ""){
            x_pos_mana_2 := min_x_mana + ((max_x_mana - min_x_mana) * life2) / 100.0
        }
        ;x_pos_mana_2 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife2%) / 100.0
        GuiControlGet, edtLife3, Principal:
        life3 := % edtLife3
        if(life3 != "")
            x_pos_mana_3 := min_x_mana + ((max_x_mana - min_x_mana) * life3) / 100.0
        
        GuiControl, Principal:, statusBar, O bot se encontra pausado.
        TrayTip, , Mana setado com sucesso!, , 0x1
    }
Return

^4::
    if(tipoSelecao != 0){
        Return
    }
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		MsgBox, Faça isso somente na tela do Tibia.
        Return
	}
    status |= (1 << 1)
    MouseGetPos, x2_manaBar, y2_manaBar
    if(status = 2){
        GuiControl, Principal:, statusBar, Falta definir a posição inicial da mana.
    } else if(status = 3){
        GuiControl, Principal:, statusBar, O bot se encontra pausado.
        TrayTip, , Mana setado com sucesso!, , 0x1
        y_med_mana := (y1_manaBar + y2_manaBar) / 2
        min_x_mana := min(x1_manaBar, x2_manaBar)
        max_x_mana := max(x1_manaBar, x2_manaBar)
        
        GuiControlGet, edtLife1, Principal:
        life1 := % edtLife1
        if(life1 != "")
            x_pos_mana_1 := min_x_mana + ((max_x_mana - min_x_mana) * life1) / 100.0
        ;x_pos_mana_1 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife1%) / 100.0
        GuiControlGet, edtLife2, Principal:
        life2 := % edtLife2
        if(life2 != "")
            x_pos_mana_2 := min_x_mana + ((max_x_mana - min_x_mana) * life2) / 100.0
        ;x_pos_mana_2 := min_x_mana + ((max_x_mana - min_x_mana) * %edtLife2%) / 100.0
        GuiControlGet, edtLife3, Principal:
        life3 := % edtLife3
        if(life3 != "")
            x_pos_mana_3 := min_x_mana + ((max_x_mana - min_x_mana) * life3) / 100.0
    }
    
Return

^z::
    MouseGetPos, autoPush_x, autoPush_y
    GuiControl, Principal:, autoPush_Pos_Status, X = %autoPush_x%`nY = %autoPush_y%
Return

!a::
    goto clickAutoPush
Return

~^LButton::
    if(auto_Push_status = 0){
        Return
    }
    MouseGetPos, x, y
    Send, {Ctrl down}
    MouseClickDrag, Left, x, y, autoPush_x, autoPush_y, 1
    Send, {Ctrl up}
    MouseMove, x, y, 1
Return

^+1::
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		MsgBox, Faça isso somente na tela do Tibia.
        Return
	}
    if(tipoSelecao = 0){
        MouseGetPos, buff_x_1, buff_y_1
        if(varExist(paralyze_x_2)){
            ; GuiControl, Principal:, txtStatusParalyze, Configurado
            TrayTip, , Barra Utility setado com sucesso!, , 0x1
        }
    } else {
        LetUserSelectRect(buff_x_1, buff_y_1, buff_x_2, buff_y_2)
        ; GuiControl, Principal:, txtStatusParalyze, Configurado
        TrayTip, , Barra Utility setado com sucesso!, , 0x1
    }
Return

SetArrowDefault(){
    SPI_SETCURSORS := 0x57
    DllCall( "SystemParametersInfo", UInt,SPI_SETCURSORS, UInt,0, UInt,0, UInt,0 ) ; Reload the system cursors
}

SetArrowCross(){
    IDC_ARROW := 32512
    IDC_CROSS := 32515
    IDC_UPARROW := 32516
    CursorHandle := DllCall( "LoadCursor", Uint,0, Int,IDC_UPARROW)
    DllCall( "SetSystemCursor", Uint,CursorHandle, Int,32512)
}

^+2::
    if(tipoSelecao != 0){
        Return
    }
    MouseGetPos, buff_x_2, buff_y_2
    if(varExist(buff_x_1)){
        ; GuiControl, Principal:, txtStatusParalyze, Configurado
        TrayTip, , Barra Utility setado com sucesso!, , 0x1
    }
Return

setKeylm1:
    GuiControlGet, key_lm1, Principal:, cbxKey1
Return
setKeylm2:
    GuiControlGet, key_lm2, Principal:, cbxKey2
Return
setKeylm3:
    GuiControlGet, key_lm3, Principal:, cbxKey3
Return
setKeypar:
    GuiControlGet, key_par, Principal:, cbxKeyParalyze
Return
setKeyhaste:
    GuiControlGet, key_haste, Principal:, cbxKeyAutoHaste
Return
setKeyfood:
    GuiControlGet, key_food, Principal:, cbxKeyAutoFood
Return

setKeyAPR:
    GuiControlGet, keyAPR, Principal:, cbxKeyAPR
Return
setKeyAPA:
    GuiControlGet, keyAPA, Principal:, cbxKeyAPA
Return
setKeyAPAmmo:
    GuiControlGet, keyAPAmmo, Principal:, cbxKeyAPAmmo
Return

setSource1:
    GuiControlGet, source1, Principal:, cbxSource1
Return
setSource2:
    GuiControlGet, source2, Principal:, cbxSource2
Return
setSource3:
    GuiControlGet, source3, Principal:, cbxSource3
Return

setPosAPR:
    SetTitleMatchMode,2
    DetectHiddenWindows, On
    IfWinExist, % "Tibia"
    {
        WinActivate
        SetArrowCross()
        KeyWait, LButton, D
        MouseGetPos, pos_x_APR, pos_y_APR
        PixelGetColor, c_APR, pos_x_APR, pos_y_APR
        SetArrowDefault()
        
        WinActivate, % "DM Healer"
        
        TrayTip, , Ring setado com sucesso!
        
    } else {
        MsgBox, O Tibia não se encontra aberto
    }
Return

setPosAPA:
    SetTitleMatchMode,2
    DetectHiddenWindows, On
    IfWinExist, % "Tibia"
    {
        WinActivate
        SetArrowCross()
        KeyWait, LButton, D
        MouseGetPos, pos_x_APA, pos_y_APA
        PixelGetColor, c_APA, pos_x_APA, pos_y_APA
        SetArrowDefault()
        
        WinActivate, % "DM Healer"
        
        TrayTip, , Amulet setado com sucesso!
        
    } else {
        MsgBox, O Tibia não se encontra aberto
    }
Return

setPosAPAmmo:
    SetTitleMatchMode,2
    DetectHiddenWindows, On
    IfWinExist, % "Tibia"
    {
        WinActivate
        SetArrowCross()
        KeyWait, LButton, D
        MouseGetPos, pos_x_APAmmo, pos_y_APAmmo
        PixelGetColor, c_APAmmo, pos_x_APAmmo, pos_y_APAmmo
        SetArrowDefault()
        
        WinActivate, % "DM Healer"
        
        TrayTip, , Ammo setado com sucesso!
        
    } else {
        MsgBox, O Tibia não se encontra aberto
    }
Return

CheckBoxAPR:
    GuiControlGet, autoPushRing, Principal:
    if(autoPushRing = 0){
        capr := false
        GuiControl, Principal:Disable, txtKeyAPR
        GuiControl, Principal:Disable, cbxKeyAPR
        GuiControl, Principal:Disable, btn_APR
    } else {
        capr := true
        GuiControl, Principal:Enabled, txtKeyAPR
        GuiControl, Principal:Enabled, cbxKeyAPR
        GuiControl, Principal:Enabled, btn_APR
    }
Return

CheckBoxAPA:
    GuiControlGet, autoPushAmulet, Principal:
    if(autoPushAmulet = 0){
        capa := false
        GuiControl, Principal:Disable, txtKeyAPA
        GuiControl, Principal:Disable, cbxKeyAPA
        GuiControl, Principal:Disable, btn_APA
    } else {
        capa := true
        GuiControl, Principal:Enabled, txtKeyAPA
        GuiControl, Principal:Enabled, cbxKeyAPA
        GuiControl, Principal:Enabled, btn_APA
    }
Return

CheckBoxAPAmmo:
    GuiControlGet, autoPushAmmo, Principal:
    if(autoPushAmmo = 0){
        capammo := false
        GuiControl, Principal:Disable, txtKeyAPAmmo
        GuiControl, Principal:Disable, cbxKeyAPAmmo
        GuiControl, Principal:Disable, btn_APAmmo
    } else {
        capammo := true
        GuiControl, Principal:Enabled, txtKeyAPAmmo
        GuiControl, Principal:Enabled, cbxKeyAPAmmo
        GuiControl, Principal:Enabled, btn_APAmmo
    }
Return

CheckBox1:
    GuiControlGet, Check1, Principal:
    if(Check1 = 0){
        clm1 := false
        GuiControl, Principal:Disable, txtKey1
        GuiControl, Principal:Disable, cbxKey1
        GuiControl, Principal:Disable, txtSource1
        GuiControl, Principal:Disable, cbxSource1
        GuiControl, Principal:Disable, sliderLife1
        GuiControl, Principal:Disable, edtLife1
    } else {
        clm1 := true
        GuiControl, Principal:Enabled, txtKey1
        GuiControl, Principal:Enabled, cbxKey1
        GuiControl, Principal:Enabled, txtSource1
        GuiControl, Principal:Enabled, cbxSource1
        GuiControl, Principal:Enabled, sliderLife1
        GuiControl, Principal:Enabled, edtLife1
    }
Return


CheckBox2:
    GuiControlGet, Check2, Principal:
    if(Check2 = 0){
        clm2 := false
        GuiControl, Principal:Disable, txtKey2
        GuiControl, Principal:Disable, cbxKey2
        GuiControl, Principal:Disable, txtSource2
        GuiControl, Principal:Disable, cbxSource2
        GuiControl, Principal:Disable, sliderLife2
        GuiControl, Principal:Disable, edtLife2
    } else {
        clm2 := true
        GuiControl, Principal:Enabled, txtKey2
        GuiControl, Principal:Enabled, cbxKey2
        GuiControl, Principal:Enabled, txtSource2
        GuiControl, Principal:Enabled, cbxSource2
        GuiControl, Principal:Enabled, sliderLife2
        GuiControl, Principal:Enabled, edtLife2
    }
Return


CheckBox3:
    GuiControlGet, Check3, Principal:
    if(Check3 = 0){
        clm3 := false
        GuiControl, Principal:Disable, txtKey3
        GuiControl, Principal:Disable, cbxKey3
        GuiControl, Principal:Disable, txtSource3
        GuiControl, Principal:Disable, cbxSource3
        GuiControl, Principal:Disable, sliderLife3
        GuiControl, Principal:Disable, edtLife3
    } else {
        clm3 := true
        GuiControl, Principal:Enabled, txtKey3
        GuiControl, Principal:Enabled, cbxKey3
        GuiControl, Principal:Enabled, txtSource3
        GuiControl, Principal:Enabled, cbxSource3
        GuiControl, Principal:Enabled, sliderLife3
        GuiControl, Principal:Enabled, edtLife3
    }
Return

CheckParalyze:
    GuiControlGet, checkParalyze, Principal:
    if(checkParalyze = 0){
        cpar := false
        GuiControl, Principal:Disable, txtParalyze
        GuiControl, Principal:Disable, cbxKeyParalyze
        ; GuiControl, Principal:Disable, txtStatusParalyze
    } else {
        cpar := true
        GuiControl, Principal:Enabled, txtParalyze
        GuiControl, Principal:Enabled, cbxKeyParalyze
        ; GuiControl, Principal:Enabled, txtStatusParalyze
    }
Return

CheckAutoHaste:
    GuiControlGet, checkAutoHaste, Principal:
    if(checkAutoHaste = 0){
        chaste := false
        GuiControl, Principal:Disable, txtAutoHaste
        GuiControl, Principal:Disable, cbxKeyAutoHaste
        ;GuiControl, Principal:Disable, txtStatusParalyze
    } else {
        chaste := true
        GuiControl, Principal:Enabled, txtAutoHaste
        GuiControl, Principal:Enabled, cbxKeyAutoHaste
        ;GuiControl, Principal:Enabled, txtStatusParalyze
    }
Return

CheckBoxTraining1:
    GuiControlGet, CheckTraining1, Principal:
    if(CheckTraining1 = 0){
        GuiControl, Principal:Disable, txtKeyTraining1
        GuiControl, Principal:Disable, cbxKeyTraining1
    } else {
        GuiControl, Principal:Enabled, txtKeyTraining1
        GuiControl, Principal:Enabled, cbxKeyTraining1
    }
Return

CheckBoxTraining2:
    GuiControlGet, CheckTraining2, Principal:
    if(CheckTraining2 = 0){
        GuiControl, Principal:Disable, txtKeyTraining2
        GuiControl, Principal:Disable, cbxKeyTraining2
    } else {
        GuiControl, Principal:Enabled, txtKeyTraining2
        GuiControl, Principal:Enabled, cbxKeyTraining2
    }
Return

CheckBoxTraining3:
    GuiControlGet, CheckTraining3, Principal:
    if(CheckTraining3 = 0){
        GuiControl, Principal:Disable, txtKeyTraining3
        GuiControl, Principal:Disable, cbxKeyTraining3
    } else {
        GuiControl, Principal:Enabled, txtKeyTraining3
        GuiControl, Principal:Enabled, cbxKeyTraining3
    }
Return

CheckBoxTraining4:
    GuiControlGet, CheckTraining4, Principal:
    if(CheckTraining4 = 0){
        GuiControl, Principal:Disable, txtKeyTraining4
        GuiControl, Principal:Disable, cbxKeyTraining4
        ;GuiControl, Principal:Disable, sliderLifeTraining4
        ;GuiControl, Principal:Disable, edtLifeTraining4
    } else {
        GuiControl, Principal:Enabled, txtKeyTraining4
        GuiControl, Principal:Enabled, cbxKeyTraining4
        ;GuiControl, Principal:Enabled, sliderLifeTraining4
        ;GuiControl, Principal:Enabled, edtLifeTraining4
    }
Return

CheckAutoFood:
    GuiControlGet, checkAutoFood, Principal:
    if(checkAutoFood = 0){
        cfood := false
        GuiControl, Principal:Disable, txtAutoFood
        GuiControl, Principal:Disable, cbxKeyAutoFood
        ;GuiControl, Principal:Disable, txtStatusParalyze
    } else {
        cfood := true
        GuiControl, Principal:Enabled, txtAutoFood
        GuiControl, Principal:Enabled, cbxKeyAutoFood
        ;GuiControl, Principal:Enabled, txtStatusParalyze
    }
Return

Slider1Move:
    Gui, Principal:Submit, nohide
    GuiControl, Principal:, edtLife1, %sliderLife1%
Return

Slider2Move:
    Gui, Principal:Submit, nohide
    GuiControl, Principal:, edtLife2, %sliderLife2%
Return

Slider3Move:
    Gui, Principal:Submit, nohide
    GuiControl, Principal:, edtLife3, %sliderLife3%
Return

SliderTraining4Move:
    Gui, Principal:Submit, nohide
    GuiControl, Principal:, edtLifeTraining4, %sliderLifeTraining4%
Return

Edit1Modify:
    Gui, Principal:Submit, nohide
    GuiControl, Principal:, sliderLife1, %edtLife1%
    
    GuiControlGet, edtLife1, Principal:
    life1 := % edtLife1
    if(varExist(min_x) = 1){
        x_pos_1 := min_x + ((max_x - min_x) * life1) / 100.0
    }
    if(varExist(min_x_mana) = 1)
        x_pos_mana_1 := min_x_mana + ((max_x_mana - min_x_mana) * life1) / 100.0
Return

Edit2Modify:
    Gui, Principal:Submit, nohide
    GuiControl, Principal:, sliderLife2, %edtLife2%
    
    GuiControlGet, edtLife2, Principal:
    life2 := % edtLife2
    if(varExist(min_x) = 1)
        x_pos_2 := min_x + ((max_x - min_x) * life2) / 100.0
    if(varExist(min_x_mana) = 1)
        x_pos_mana_2 := min_x_mana + ((max_x_mana - min_x_mana) * life2) / 100.0
Return

Edit3Modify:
    Gui, Principal:Submit, nohide
    GuiControl, Principal:, sliderLife3, %edtLife3%
    
    GuiControlGet, edtLife3, Principal:
    life3 := % edtLife3
    if(varExist(min_x) = 1)
        x_pos_3 := min_x + ((max_x - min_x) * life3) / 100.0
    if(varExist(min_x_mana) = 1)
        x_pos_mana_3 := min_x_mana + ((max_x_mana - min_x_mana) * life3) / 100.0
Return

EditTraining4Modify:
    Gui, Principal:Submit, nohide
    GuiControl, Principal:, sliderLifeTraining4, %edtLifeTraining4%
Return

btn_SetaManaTraining:
    goto btn_SetaMana
Return

StartTrainingButton:
    if(training_status = 1){
        SetTimer, training, Off
        training_status := 0
        GuiControl, Principal:, btn_StartTraining, Start Training
    } else {
        GuiControlGet, editTimer_Training, Principal:
        tempo := % editTimer_Training
        GuiControlGet, edtLifeTraining4, Principal:
        life4 := % edtLifeTraining4
        if(life4 = ""){
            MsgBox, Defina a porcentagem de mana minima para treinar
            Return
        }
        if(!varExist(min_x_mana)){
            MsgBox, Faltou setar a posição da barra de mana
            Return
        }
        if(tempo != ""){
            ;SetTimer, run, Off
            SetTimer, training, %tempo%
            GuiControl, Principal:, btn_StartTraining, Pause Training
            training_status := 1
        } else {
            MsgBox, Defina um timer para o treinamento
        }
    }
Return

training:
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		Return
	}
    min_x_mana := min(x1_manaBar, x2_manaBar)
    max_x_mana := max(x1_manaBar, x2_manaBar)
    y_med_mana := (y1_manaBar + y2_manaBar) / 2
    
    GuiControlGet, edtLifeTraining4, Principal:
    life4 := % edtLifeTraining4
    ; x_pos := min_x + ((max_x - min_x) * life1) / 100.0
    x_pos_mana := min_x_mana + ((max_x_mana - min_x_mana) * life4) / 100.0
    ;y_pos := y_med
    ;GuiControlGet, source1, Principal:, cbxSource1        
    PixelGetColor, manaColor, x_pos_mana, y_med_mana, RGB
    if(isBlack(manaColor, "Mana") = 2){
        GuiControlGet, CheckTraining1, Principal:
        if(CheckTraining1 = 1){
            GuiControlGet, key1, Principal:, cbxKeyTraining1
            send {%key1%}
        }
        GuiControlGet, CheckTraining2, Principal:
        if(CheckTraining2 = 1){
            GuiControlGet, key2, Principal:, cbxKeyTraining2
            send {%key2%}
        }
        GuiControlGet, CheckTraining3, Principal:
        if(CheckTraining3 = 1){
            GuiControlGet, key3, Principal:, cbxKeyTraining3
            send {%key3%}
        }
    } else {    
        GuiControlGet, CheckTraining4, Principal:    
        if(CheckTraining4 = 1){
            ;GuiControlGet, edtLifeTraining4, Principal:
            ;life4 := % edtLifeTraining4
            ; x_pos := min_x + ((max_x - min_x) * life1) / 100.0
            ;x_pos_mana := min_x_mana + ((max_x_mana - min_x_mana) * life4) / 100.0
            ;y_pos := y_med
            ;GuiControlGet, source1, Principal:, cbxSource1        
            ;PixelGetColor, manaColor, x_pos_mana, y_med_mana, RGB
            
            ;if(isBlack(manaColor, "Mana") = 1){
            GuiControlGet, key4, Principal:, cbxKeyTraining4
            send {%key4%}
            ;}
        }
    }
Return

min(num*){
    min := num[1]
	Loop % num.MaxIndex()
		min := (num[A_Index] < min) ? num[A_Index] : min
	return min
}

max(num*){
    max := num[1]
	Loop % num.MaxIndex()
		max := (num[A_Index] > max) ? num[A_Index] : max
	return max
}

/*
^x::
    goto run
    ImageSearch, xx, yy, %buff_x_1%, %buff_y_1%, %buff_x_2%, %buff_y_2%, Imagens\\haste_3.jpg
    if(ErrorLevel = 0){
        MsgBox, achou
    } else if(ErrorLevel = 1){
        MsgBox, Nao achou
    } else {
        MsgBox, Erro
    }
Return
*/


^b::
    MouseGetPos, x, y
    PixelGetColor, pixelColor, %x%, %y%, RGB
    algo := RGB_Euclidian_Distance(pixelColor, 0x000000)
    MsgBox, %pixelColor% %algo%
Return


abs(a){
    if(a < 0){
        return (-a)
    }
    return a
}

RGB_Euclidian_Distance( c1, c2 ) {
   r1 := c1 >> 16
   g1 := c1 >> 8 & 255
   b1 := c1 & 255
   r2 := c2 >> 16
   g2 := c2 >> 8 & 255
   b2 := c2 & 255
   return Sqrt( (r1-r2)**2 + (g1-g2)**2 + (b1-b2)**2 )
}

/*
^x::
    MouseGetPos, ax, ay
    PixelGetColor, tmp, ax, ay
    hehe := RGB_Euclidian_Distance(tmp, 0x000000)
    MsgBox, %tmp% %hehe%
    Return
*/
isBlack(lifeColor, source){
    BLUE := 0x0000FF
    RED := 0xFF0000
    GREEN := 0x00FF00
    BLACK := 0x000000
    
    
    if(source = "Life"){
        first := RGB_Euclidian_Distance(lifeColor, RED)
        first_t := RGB_Euclidian_Distance(lifeColor, GREEN)
    } else if(source = "Mana"){
        first := RGB_Euclidian_Distance(lifeColor, BLUE)
    }
    second := RGB_Euclidian_Distance(lifeColor, BLACK)
    /*
    if(second <= 100){
        return 1
    }
    return 2
    */
    if(first < second){
        return 2
    }    
    return 1
}

; Pause do bot sem ser pela tela
!x::
    goto btn_Start
Return

runRing:
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		Return
	}
    if(capr == false){
        Return
    }
    PixelGetColor, tmp, pos_x_APR, pos_y_APR
    if(tmp == c_APR){
        send, {%keyAPR%}
    }
Return
runAmulet:
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		Return
	}
    if(capa == false){
        Return
    }
    PixelGetColor, tmp, pos_x_APA, pos_y_APA
    if(tmp == c_APA){
        send, {%keyAPA%}
    }
Return
runAmmo:
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		Return
	}
    if(capammo == false){
        Return
    }
    PixelGetColor, tmp, pos_x_APAmmo, pos_y_APAmmo
    if(tmp = c_APAmmo){
        send, {%keyAPAmmo%}
    }
Return
run:
    WinGetTitle, windowName, A
	IfNotInString, windowName, Tibia
	{
		Return
	}
    
    if(clm1){
        ;GuiControlGet, source1, Principal:, cbxSource1
        if(source1 = "Life"){
            PixelGetColor, lifeColor, x_pos_1, y_med, RGB            
        } else {
            PixelGetColor, lifeColor, x_pos_mana_1, y_med_mana, RGB
        } 
        if(isBlack(lifeColor, source1) = 1){
            ;GuiControlGet, key1, Principal:, cbxKey1
            send {%key_lm1%}
        }
    }
    ;GuiControlGet, Check2, Principal:
    if(clm2){
        ;GuiControlGet, source2, Principal:, cbxSource2
        if(source2 = "Life"){
            PixelGetColor, lifeColor, x_pos_2, y_med, RGB
        } else {
            PixelGetColor, lifeColor, x_pos_mana_2, y_med_mana, RGB
        }
        if(isBlack(lifeColor, source2) = 1){
            ;GuiControlGet, key2, Principal:, cbxKey2
            send {%key_lm2%}
        }
    }
    ;GuiControlGet, Check3, Principal:
    if(clm3){
        ;GuiControlGet, source3, Principal:, cbxSource3
        if(source3 = "Life"){
            PixelGetColor, lifeColor, x_pos_3, y_med, RGB
        } else {
            PixelGetColor, lifeColor, x_pos_mana_3, y_med_mana, RGB
        }
        if(isBlack(lifeColor, source3) = 1){
            ; MsgBox, Tem que curar
            ;GuiControlGet, key3, Principal:, cbxKey3
            send {%key_lm3%}
        }
    }
    ;GuiControlGet, checkParalyze, Principal:
    if(cpar){
        PixelSearch, pos_x_image, pos_y_image, %buff_x_1%, %buff_y_1%, %buff_x_2%, %buff_y_2%, 0x0000FF, 2, Fast ;images\paralyze.png
        if(ErrorLevel = 0){
            ;GuiControlGet, key_anti_paralyze, Principal:, cbxKeyParalyze
            send {%key_par%}
        }
    }
    
    ;GuiControlGet, checkAutoHaste, Principal:
    if(chaste){
        ;ImageSearch, pos_x_image, pos_y_image, %buff_x_1%, %buff_y_1%, %buff_x_2%, %buff_y_2%, Imagens\\haste_2.png
        PixelSearch, pos_x_image, pos_y_image, %buff_x_1%, %buff_y_1%, %buff_x_2%, %buff_y_2%, 0x508BB0, 5, Fast
        
        if(ErrorLevel = 1){
            ;GuiControlGet, key_auto_haste, Principal:, cbxKeyAutoHaste
            send {%key_haste%}
        }
    }
    
    ;GuiControlGet, checkAutoFood, Principal:
    if(cfood){
        ;ImageSearch, pos_x_image, pos_y_image, %buff_x_1%, %buff_y_1%, %buff_x_2%, %buff_y_2%, Imagens\\haste_2.png
        PixelSearch, pos_x_image, pos_y_image, %buff_x_1%, %buff_y_1%, %buff_x_2%, %buff_y_2%, 0x3FB4EF, 5, Fast
        
        if(ErrorLevel = 0){
            ;GuiControlGet, key_auto_food, Principal:, cbxKeyAutoFood
            send {%key_food%}
        }
    }    
Return

btn_Start:
    ; Pause, Toggle, 1
    GUIControlGet, OutVar, Principal: Enabled, startPause
    if(OutVar = 0){
        Return
    }
    if(status = 0){
        status := 1
        SetTimer, run, %timer%
        if(capr){
            SetTimer, runRing, %timer%
        }
        if(capa){
            SetTimer, runAmulet, %timer%
        }
        if(capammo){
            SetTimer, runAmmo, %timer%
        }
        SetTitleMatchMode,2
        DetectHiddenWindows, On
        IfWinExist, % "Tibia"
        {
            WinActivate
        }
    } else {
        status := 0
        SetTimer, run, off
        SetTimer, runRing, off
        SetTimer, runAmulet, off
        SetTimer, runAmmo, off
    }
    

    if(status = 0) {
        GuiControl, Principal:, statusBar, O bot se encontra pausado.
        GuiControl, Principal:, startPause, Start
        TrayTip, , Bot pausado, , 0x1
    } else {
        GuiControl, Principal:, statusBar, O bot está em execução.
        GuiControl, Principal:, startPause, Pause
        TrayTip, , Bot iniciado, , 0x1
    }
		
	Return
Return

setTimer:
	GuiControlGet, timer, Principal:
	if(timer = ){
		Return
	} else {
        GuiControl, Principal:Enabled, startPause
	}
Return

GUIConfiguracaoEscape:
GUIConfiguracaoClose:
    Gui, %A_GUI%: cancel
Return

GUIPrincipalEscape:
GUIPrincipalClose:
    ExitApp
